//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Project/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Driver"",
            ""id"": ""9b44fec1-9842-4cfd-adaf-2732b83d25e0"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""2964dcba-ded4-4e08-afab-9984b697c09c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""91ffb1a8-2360-4588-84cf-2ddb389641f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer Left"",
                    ""type"": ""Button"",
                    ""id"": ""b014b7d7-b05b-4755-b82b-1bb1fa97bb94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer Right"",
                    ""type"": ""Button"",
                    ""id"": ""fac18165-1add-4d9a-8748-0fe997579708"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accelerate (Analog)"",
                    ""type"": ""Value"",
                    ""id"": ""807e1311-afff-45c0-86b0-6f250a6e6df7"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake (Analog)"",
                    ""type"": ""Value"",
                    ""id"": ""08fbd7be-7502-4b9a-9594-2332bd78200a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering (Analog)"",
                    ""type"": ""Value"",
                    ""id"": ""bf91132c-4ea0-40d0-8549-c21086fd2f8d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cae223b2-7bac-4c01-b8ff-96343e6358c1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e99e2f1-573e-4fd9-8654-6413614b49a7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09c62baa-b236-428e-aa56-89f91702caa1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Steer Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23c18df3-4cbb-4055-86a8-ac67c51d1a89"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Steer Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77a25da6-9c3c-4988-bea3-0150d9c7d600"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Accelerate (Analog)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19a7313a-9af1-491f-95b3-2e9a6161ab38"",
                    ""path"": ""<OculusTouchController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Accelerate (Analog)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04e7eb5f-abde-41dd-97ef-b74ce464c8c3"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Brake (Analog)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e23e055c-917d-4ea4-868f-e44a0daca3b1"",
                    ""path"": ""<OculusTouchController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Brake (Analog)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad Left Stick"",
                    ""id"": ""29277641-bbd7-4804-979c-69df28880133"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering (Analog)"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d170fc89-02ad-4bbe-b11e-95db11e844f7"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Steering (Analog)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3401a192-5b64-4b4c-989b-60a58435fc42"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Steering (Analog)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a8e421a-d340-41f1-a370-93096c3da071"",
                    ""path"": ""<OculusTouchController>/thumbstick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Steering (Analog)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Passenger"",
            ""id"": ""2e1c11d2-d3c2-4d98-a967-e8e8412e509f"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""061d9f59-dafe-4783-ad47-605bcf2c6ec2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ready Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""f3377ffa-7106-471b-afa9-7bb491ca730e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""ead08a1f-d511-4290-af86-112e2b5ad1c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27842434-6fa8-4d9e-9fb4-e88cec546290"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b921e12-11bf-4644-8ce0-e52348906591"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ready Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1886ee7-b5e9-498b-8918-45046a35ce4a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Driver
        m_Driver = asset.FindActionMap("Driver", throwIfNotFound: true);
        m_Driver_Accelerate = m_Driver.FindAction("Accelerate", throwIfNotFound: true);
        m_Driver_Brake = m_Driver.FindAction("Brake", throwIfNotFound: true);
        m_Driver_SteerLeft = m_Driver.FindAction("Steer Left", throwIfNotFound: true);
        m_Driver_SteerRight = m_Driver.FindAction("Steer Right", throwIfNotFound: true);
        m_Driver_AccelerateAnalog = m_Driver.FindAction("Accelerate (Analog)", throwIfNotFound: true);
        m_Driver_BrakeAnalog = m_Driver.FindAction("Brake (Analog)", throwIfNotFound: true);
        m_Driver_SteeringAnalog = m_Driver.FindAction("Steering (Analog)", throwIfNotFound: true);
        // Passenger
        m_Passenger = asset.FindActionMap("Passenger", throwIfNotFound: true);
        m_Passenger_Look = m_Passenger.FindAction("Look", throwIfNotFound: true);
        m_Passenger_ReadyWeapon = m_Passenger.FindAction("Ready Weapon", throwIfNotFound: true);
        m_Passenger_FireWeapon = m_Passenger.FindAction("Fire Weapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Driver
    private readonly InputActionMap m_Driver;
    private IDriverActions m_DriverActionsCallbackInterface;
    private readonly InputAction m_Driver_Accelerate;
    private readonly InputAction m_Driver_Brake;
    private readonly InputAction m_Driver_SteerLeft;
    private readonly InputAction m_Driver_SteerRight;
    private readonly InputAction m_Driver_AccelerateAnalog;
    private readonly InputAction m_Driver_BrakeAnalog;
    private readonly InputAction m_Driver_SteeringAnalog;
    public struct DriverActions
    {
        private @GameInput m_Wrapper;
        public DriverActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_Driver_Accelerate;
        public InputAction @Brake => m_Wrapper.m_Driver_Brake;
        public InputAction @SteerLeft => m_Wrapper.m_Driver_SteerLeft;
        public InputAction @SteerRight => m_Wrapper.m_Driver_SteerRight;
        public InputAction @AccelerateAnalog => m_Wrapper.m_Driver_AccelerateAnalog;
        public InputAction @BrakeAnalog => m_Wrapper.m_Driver_BrakeAnalog;
        public InputAction @SteeringAnalog => m_Wrapper.m_Driver_SteeringAnalog;
        public InputActionMap Get() { return m_Wrapper.m_Driver; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriverActions set) { return set.Get(); }
        public void SetCallbacks(IDriverActions instance)
        {
            if (m_Wrapper.m_DriverActionsCallbackInterface != null)
            {
                @Accelerate.started -= m_Wrapper.m_DriverActionsCallbackInterface.OnAccelerate;
                @Accelerate.performed -= m_Wrapper.m_DriverActionsCallbackInterface.OnAccelerate;
                @Accelerate.canceled -= m_Wrapper.m_DriverActionsCallbackInterface.OnAccelerate;
                @Brake.started -= m_Wrapper.m_DriverActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_DriverActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_DriverActionsCallbackInterface.OnBrake;
                @SteerLeft.started -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteerLeft;
                @SteerLeft.performed -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteerLeft;
                @SteerLeft.canceled -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteerLeft;
                @SteerRight.started -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteerRight;
                @SteerRight.performed -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteerRight;
                @SteerRight.canceled -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteerRight;
                @AccelerateAnalog.started -= m_Wrapper.m_DriverActionsCallbackInterface.OnAccelerateAnalog;
                @AccelerateAnalog.performed -= m_Wrapper.m_DriverActionsCallbackInterface.OnAccelerateAnalog;
                @AccelerateAnalog.canceled -= m_Wrapper.m_DriverActionsCallbackInterface.OnAccelerateAnalog;
                @BrakeAnalog.started -= m_Wrapper.m_DriverActionsCallbackInterface.OnBrakeAnalog;
                @BrakeAnalog.performed -= m_Wrapper.m_DriverActionsCallbackInterface.OnBrakeAnalog;
                @BrakeAnalog.canceled -= m_Wrapper.m_DriverActionsCallbackInterface.OnBrakeAnalog;
                @SteeringAnalog.started -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteeringAnalog;
                @SteeringAnalog.performed -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteeringAnalog;
                @SteeringAnalog.canceled -= m_Wrapper.m_DriverActionsCallbackInterface.OnSteeringAnalog;
            }
            m_Wrapper.m_DriverActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @SteerLeft.started += instance.OnSteerLeft;
                @SteerLeft.performed += instance.OnSteerLeft;
                @SteerLeft.canceled += instance.OnSteerLeft;
                @SteerRight.started += instance.OnSteerRight;
                @SteerRight.performed += instance.OnSteerRight;
                @SteerRight.canceled += instance.OnSteerRight;
                @AccelerateAnalog.started += instance.OnAccelerateAnalog;
                @AccelerateAnalog.performed += instance.OnAccelerateAnalog;
                @AccelerateAnalog.canceled += instance.OnAccelerateAnalog;
                @BrakeAnalog.started += instance.OnBrakeAnalog;
                @BrakeAnalog.performed += instance.OnBrakeAnalog;
                @BrakeAnalog.canceled += instance.OnBrakeAnalog;
                @SteeringAnalog.started += instance.OnSteeringAnalog;
                @SteeringAnalog.performed += instance.OnSteeringAnalog;
                @SteeringAnalog.canceled += instance.OnSteeringAnalog;
            }
        }
    }
    public DriverActions @Driver => new DriverActions(this);

    // Passenger
    private readonly InputActionMap m_Passenger;
    private IPassengerActions m_PassengerActionsCallbackInterface;
    private readonly InputAction m_Passenger_Look;
    private readonly InputAction m_Passenger_ReadyWeapon;
    private readonly InputAction m_Passenger_FireWeapon;
    public struct PassengerActions
    {
        private @GameInput m_Wrapper;
        public PassengerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Passenger_Look;
        public InputAction @ReadyWeapon => m_Wrapper.m_Passenger_ReadyWeapon;
        public InputAction @FireWeapon => m_Wrapper.m_Passenger_FireWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Passenger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PassengerActions set) { return set.Get(); }
        public void SetCallbacks(IPassengerActions instance)
        {
            if (m_Wrapper.m_PassengerActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_PassengerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PassengerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PassengerActionsCallbackInterface.OnLook;
                @ReadyWeapon.started -= m_Wrapper.m_PassengerActionsCallbackInterface.OnReadyWeapon;
                @ReadyWeapon.performed -= m_Wrapper.m_PassengerActionsCallbackInterface.OnReadyWeapon;
                @ReadyWeapon.canceled -= m_Wrapper.m_PassengerActionsCallbackInterface.OnReadyWeapon;
                @FireWeapon.started -= m_Wrapper.m_PassengerActionsCallbackInterface.OnFireWeapon;
                @FireWeapon.performed -= m_Wrapper.m_PassengerActionsCallbackInterface.OnFireWeapon;
                @FireWeapon.canceled -= m_Wrapper.m_PassengerActionsCallbackInterface.OnFireWeapon;
            }
            m_Wrapper.m_PassengerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @ReadyWeapon.started += instance.OnReadyWeapon;
                @ReadyWeapon.performed += instance.OnReadyWeapon;
                @ReadyWeapon.canceled += instance.OnReadyWeapon;
                @FireWeapon.started += instance.OnFireWeapon;
                @FireWeapon.performed += instance.OnFireWeapon;
                @FireWeapon.canceled += instance.OnFireWeapon;
            }
        }
    }
    public PassengerActions @Passenger => new PassengerActions(this);
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IDriverActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnSteerLeft(InputAction.CallbackContext context);
        void OnSteerRight(InputAction.CallbackContext context);
        void OnAccelerateAnalog(InputAction.CallbackContext context);
        void OnBrakeAnalog(InputAction.CallbackContext context);
        void OnSteeringAnalog(InputAction.CallbackContext context);
    }
    public interface IPassengerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnReadyWeapon(InputAction.CallbackContext context);
        void OnFireWeapon(InputAction.CallbackContext context);
    }
}
